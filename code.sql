CREATE TABLE EVENTS
(
	ARTIST_NAME VARCHAR(200), 
	USER_AUTHONTICATION VARCHAR(200), 
	USER_FIRST_NAME VARCHAR(200),
	USER_GENDER VARCHAR(5),
	NO_ITEMS_IN_SESSION NUMERIC(10),
	USER_LAST_NAME VARCHAR(200), 
	SONG_LENGTH_IN_SECONDS NUMERIC(26, 6), 
	SONG_LEVEL VARCHAR(200), 
	USER_LOCATION VARCHAR(200), 
	SONG_METHOD VARCHAR(200), 	
	SONG_PLAYED VARCHAR(200), 
	USER_REGESTRATION_TIME_IN_SECONDS NUMERIC(26, 6), 
	SESSION_ID NUMERIC(5), 
	SONG_NAME VARCHAR(200), 
	SONG_STATUS NUMERIC(5), 
	TIME_IN_SECONDS_OF_PLAYING_SONG NUMERIC(26, 6), 
	USER_AGENT VARCHAR(400), 
	USER_ID NUMERIC(10)
);

-----------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE SONGS
(
	ARTIST_ID VARCHAR(100), 
	ARTIST_LATITUDE NUMERIC(20, 6),
	ARTIST_LOCATION VARCHAR(100),
	ARTIST_LONGTUDE NUMERIC(20, 6), 
	ARTIST_NAME VARCHAR(100), 
	SONG_DURATION_IN_SECONDS NUMERIC(20,6),
	ARTIST_NUM_OF_SONGS NUMERIC(5), 
	SONG_ID VARCHAR(100),
	SONG_NAME VARCHAR(100),
	SONG_REALASED_YEAR NUMERIC(5)
	
);


	ARTIST_NUM_OF_SONGS NUMERIC(5), 
	SONG_ID VARCHAR(100),
	SONG_NAME VARCHAR(100),
	SONG_REALASED_YEAR NUMERIC(5)
	
);

----------------------------------------------------------------------------------------------------


SELECT E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, S.SONG_DURATION_IN_SECONDS
, E.SONG_NAME, S.SONG_NAME, S.SONG_ID, S.SONG_REALASED_YEAR
FROM EVENTS E, SONGS S
WHERE E.ARTIST_NAME = S.ARTIST_NAME;


SELECT E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, S.SONG_DURATION_IN_SECONDS
, E.SONG_NAME, S.SONG_NAME, S.SONG_ID, S.SONG_REALASED_YEAR
FROM EVENTS E, SONGS S
WHERE E.SONG_NAME = S.SONG_NAME;



- THE ORDER OF ARTISTS WITH THEIR LOCATIONS OCCORDING TO THE NUMBER OF USERS HEAR THEIR SONGS 

SELECT DISTINCT * FROM
(SELECT E.ARTIST_NAME, S.ARTIST_ID, ARTIST_LOCATION, ARTIST_LATITUDE, ARTIST_LONGTUDE
, COUNT(E.USER_ID) OVER(PARTITION BY E.ARTIST_NAME) USERS_NUMBER
FROM EVENTS E, SONGS S
WHERE E.ARTIST_NAME = S.ARTIST_NAME) USER_SUB_Q 
ORDER BY USERS_NUMBER DESC;



-- HOW LONG EACH USER SPEND IN OUR WEB SITE

SELECT USER_ID, DENSE_RANK() OVER(ORDER BY USER_DURATION_IN_SECONDS DESC) ,
USER_FIRST_NAME, USER_LAST_NAME, USER_DURATION_IN_SECONDS 
FROM 
(
SELECT DISTINCT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, 
SUM(SONG_LENGTH_IN_SECONDS) OVER(PARTITION BY USER_ID) USER_DURATION_IN_SECONDS
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong') SUB_QUERY;



-- SONGS ID THE USERS HEAR THE MOST ORDERD FORM THE MOST ONE TO THE LOWEST AND THE ARTIST OF EACH SONG

SELECT * FROM
(
 SELECT SONG_ID, S.SONG_NAME, S.ARTIST_ID, E.ARTIST_NAME, E.SONG_LENGTH_IN_SECONDS, 
COUNT(USER_ID) OVER(PARTITION BY SONG_ID) USERS_NUMBER
FROM EVENTS E, SONGS S
WHERE E.SONG_NAME = S.SONG_NAME AND SONG_PLAYED = 'NextSong'
	) SUB_QUERY ORDER BY USERS_NUMBER DESC;
	
	
	
-- GET MOST PLAYED SONGS IN TOTAL SESSIONS ACCORDING TO THE NUMBER OF USERS WITH THEIR LENGHT, PAID STATUS, ARTIST NAME AND RANK 

SELECT * , DENSE_RANK() OVER(ORDER BY USERS_NUMBER DESC) FROM
(SELECT DISTINCT SONG_NAME, ARTIST_NAME, SONG_LEVEL, COUNT(USER_ID) OVER (PARTITION BY SONG_NAME) USERS_NUMBER
FROM EVENTS
WHERE SONG_PLAYED = 'NextSong') SUB_QUERY_1
WHERE SONG_NAME IS NOT NULL ;



-- GET THE RANK OF EACH SONG IN EACH SESSION ACCORDING TO THE NUMBER OF USERS HEARD THEM IN THIS SESSION 

SELECT * From
(
SELECT  DISTINCT SESSION_ID, SONG_NAME, USERS_NUMBER
, ARTIST_NAME, SONG_LEVEL, DENSE_RANK()  OVER(PARTITION BY SESSION_ID ORDER BY USERS_NUMBER DESC) SONG_RANK FROM
(SELECT SESSION_ID, SONG_NAME, COUNT(USER_ID) OVER(PARTITION BY SESSION_ID, SONG_NAME) USERS_NUMBER, ARTIST_NAME, SONG_LEVEL
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong'
 ) SUB_QUERY) SUB_QUERY_2
 GROUP BY SESSION_ID, SONG_NAME, SONG_LEVEL, USERS_NUMBER, ARTIST_NAME, SONG_RANK
 ORDER BY SESSION_ID, SONG_RANK;
 
 
 -- ORDER OF ARTISTIS ACCORDING TO THE SONGS THEY MADE 

SELECT *, DENSE_RANK() OVER(ORDER BY SONGS_NUMBER DESC) FROM 
(
SELECT DISTINCT ARTIST_NAME, SONG_NAME, COUNT(SONG_NAME) OVER(PARTITION BY ARTIST_NAME) SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL) SUB_QUERY;


-- GET THE MOST USERS CONTRIBUTE IN THE SYSTEM ACCORDING TO THE NUMBER OF SONGS THEY HEARD IN ALL SESSIONS

SELECT *, DENSE_RANK() OVER(ORDER BY SONGS_NUMBER) USER_RANK
FROM 
(
SELECT DISTINCT SESSION_ID, USER_ID, USER_FIRST_NAME, USER_GENDER, USER_LAST_NAME, SONG_NAME,
COUNT(SONG_NAME) OVER (PARTITION BY USER_ID) SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong') SUB_QUERY;


-- GET THE LONGEST SONG and SHORTEST SONG IN EACH SESSION 

SELECT SONG_NAME, ARTIST_NAME, SESSION_ID, SONG_LENGTH_IN_SECONDS, USER_ID, 
FIRST_VALUE(SONG_NAME) OVER(PARTITION BY SESSION_ID ORDER BY SONG_LENGTH_IN_SECONDS DESC) LONGEST_SONG, 
FIRST_VALUE(SONG_NAME) OVER(PARTITION BY SESSION_ID ORDER BY SONG_LENGTH_IN_SECONDS) SHORTEST_SONG
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong'
ORDER BY SESSION_ID;


-- ANALYSIS IF THE PROPABILITY OF EACH USER SUCCESS TO ACCESS SONG (METHOD IS 200) FROM ALL REQUESTS 


SELECT DISTINCT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, NUMBER_OF_TRAILS, SUCCESSFUL_TRAILS, 
CAST(SUCCESSFUL_TRAILS AS FLOAT) /NUMBER_OF_TRAILS SUCCESSFUL_PERCENTAGE
FROM 
(
SELECT USER_ID, USER_FIRST_NAME, USER_LAST_NAME
,COUNT(USER_ID) OVER(PARTITION BY USER_ID) NUMBER_OF_TRAILS
, COUNT (CASE WHEN SONG_STATUS = 200 THEN 1 END) OVER(PARTITION BY USER_ID) SUCCESSFUL_TRAILS 
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong' ) SUB_QUERY
ORDER BY USER_ID;



-- GET THE NUMBER OF SONGS PAID FOR EACH USER, FREE AND PERCENTAGE OF PAID INCOME FROM EACH USER

SELECT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, PAID_SONGS_NUMBER, FREE_SONGS_NUMBER, 
CAST (PAID_SONGS_NUMBER AS FLOAT) / (PAID_SONGS_NUMBER + FREE_SONGS_NUMBER) PAID_SONGS_PERCENTAGE
FROM 
(
SELECT DISTINCT USER_ID, USER_FIRST_NAME, USER_LAST_NAME,
COUNT(CASE SONG_LEVEL WHEN 'paid' THEN 1 END) OVER(PARTITION BY USER_ID) PAID_SONGS_NUMBER, 
COUNT(CASE SONG_LEVEL WHEN 'free' THEN 1 END) OVER(PARTITION BY USER_ID) FREE_SONGS_NUMBER
FROM EVENTS
WHERE SONG_NAME IS NOT NULL AND SONG_PLAYED = 'NextSong') SUB_QUERY 
ORDER BY USER_ID;




---- Additional Queries ----------




--Find Artists with the Most Songs:

--This query returns artists ordered by the number of songs they have.

SELECT ARTIST_NAME, COUNT(*) AS NUM_OF_SONGS
FROM SONGS
GROUP BY ARTIST_NAME
ORDER BY NUM_OF_SONGS DESC;






-- Find Users Who Listened to the Longest Songs:

-- This query retrieves users who listened to the songs with the longest duration.

SELECT DISTINCT E.USER_ID, E.USER_FIRST_NAME, E.USER_LAST_NAME, E.SONG_NAME, S.SONG_DURATION_IN_SECONDS
FROM EVENTS E
JOIN SONGS S ON E.SONG_NAME = S.SONG_NAME
WHERE E.SONG_PLAYED = 'NextSong'
ORDER BY S.SONG_DURATION_IN_SECONDS DESC;






-- Get the Average Song Length for Each Artist:

-- This query calculates the average song length for each artist.

SELECT ARTIST_NAME, AVG(SONG_DURATION_IN_SECONDS) AS AVG_SONG_LENGTH
FROM SONGS
GROUP BY ARTIST_NAME
ORDER BY AVG_SONG_LENGTH DESC;





-- Find Users Who Registered in a Specific Year:

-- This query returns users who registered in a particular year.


SELECT USER_FIRST_NAME, USER_LAST_NAME, USER_REGESTRATION_TIME_IN_SECONDS
FROM EVENTS
WHERE EXTRACT(YEAR FROM TO_TIMESTAMP(USER_REGESTRATION_TIME_IN_SECONDS)) = 2022; -- Replace with the desired year






-- Find the Top 10 Songs Released Before a Certain Year:

-- This query retrieves the top 10 songs released before a specified year.

SELECT SONG_NAME, SONG_REALASED_YEAR
FROM SONGS
WHERE SONG_REALASED_YEAR < 2000 -- Replace with the desired year
ORDER BY SONG_REALASED_YEAR DESC
LIMIT 10;




-- Get the Total Number of Sessions by Users:

-- This query calculates the total number of sessions for each user.

SELECT USER_ID, USER_FIRST_NAME, USER_LAST_NAME, COUNT(DISTINCT SESSION_ID) AS TOTAL_SESSIONS
FROM EVENTS
GROUP BY USER_ID, USER_FIRST_NAME, USER_LAST_NAME
ORDER BY TOTAL_SESSIONS DESC;




-- Find Users Who Listened to Songs of the Same Genre:

-- This query identifies users who have listened to songs of the same genre.


SELECT DISTINCT E1.USER_ID, E1.USER_FIRST_NAME, E1.USER_LAST_NAME, E1.SONG_NAME, S1.SONG_GENRE
FROM EVENTS E1
JOIN SONGS S1 ON E1.SONG_NAME = S1.SONG_NAME
WHERE E1.SONG_PLAYED = 'NextSong'
AND E1.USER_ID IN (
    SELECT DISTINCT E2.USER_ID
    FROM EVENTS E2
    JOIN SONGS S2 ON E2.SONG_NAME = S2.SONG_NAME
    WHERE E2.SONG_PLAYED = 'NextSong'
    AND S2.SONG_GENRE = 'Rock'  -- Replace with the desired genre
);



-- Find Artists with the Highest Average User Listening Time:

-- This query calculates the average listening time for each artist, considering all users who have listened to their songs.


SELECT S.ARTIST_NAME, AVG(E.SONG_LENGTH_IN_SECONDS) AS AVG_USER_LISTENING_TIME
FROM EVENTS E
JOIN SONGS S ON E.SONG_NAME = S.SONG_NAME
WHERE E.SONG_PLAYED = 'NextSong'
GROUP BY S.ARTIST_NAME
ORDER BY AVG_USER_LISTENING_TIME DESC;


-- Find Users Who Listened to All Songs by a Specific Artist:

-- This query identifies users who have listened to all songs by a particular artist.


SELECT DISTINCT E.USER_ID, E.USER_FIRST_NAME, E.USER_LAST_NAME, S.ARTIST_NAME
FROM EVENTS E
JOIN SONGS S ON E.SONG_NAME = S.SONG_NAME
WHERE E.SONG_PLAYED = 'NextSong'
AND NOT EXISTS (
    SELECT S2.SONG_NAME
    FROM SONGS S2
    WHERE S2.ARTIST_NAME = S.ARTIST_NAME
    EXCEPT
    SELECT E2.SONG_NAME
    FROM EVENTS E2
    WHERE E2.USER_ID = E.USER_ID
);




-- Find the Top 5 Artists with the Highest Percentage of Paid Users:

-- This query calculates the top 5 artists with the highest percentage of users who listened to paid songs.

SELECT S.ARTIST_NAME, 
       COUNT(CASE WHEN E.SONG_LEVEL = 'paid' THEN 1 ELSE NULL END) AS PAID_SONGS,
       COUNT(*) AS TOTAL_SONGS,
       (COUNT(CASE WHEN E.SONG_LEVEL = 'paid' THEN 1 ELSE NULL END) * 100.0) / COUNT(*) AS PERCENT_PAID_USERS
FROM EVENTS E
JOIN SONGS S ON E.SONG_NAME = S.SONG_NAME
WHERE E.SONG_PLAYED = 'NextSong'
GROUP BY S.ARTIST_NAME
HAVING COUNT(*) > 0
ORDER BY PERCENT_PAID_USERS DESC
LIMIT 5;



-- Find Users Who Have Listened to Songs of All Genres:

-- This query identifies users who have listened to songs of all available genres.



SELECT DISTINCT E.USER_ID, E.USER_FIRST_NAME, E.USER_LAST_NAME
FROM EVENTS E
WHERE E.SONG_PLAYED = 'NextSong'
AND NOT EXISTS (
    SELECT DISTINCT S.SONG_GENRE
    FROM SONGS S
    EXCEPT
    SELECT DISTINCT S2.SONG_GENRE
    FROM SONGS S2
    JOIN EVENTS E2 ON E2.SONG_NAME = S2.SONG_NAME
    WHERE E2.USER_ID = E.USER_ID
);

